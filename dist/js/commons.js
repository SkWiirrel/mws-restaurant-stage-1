"use strict";var _createClass=function(){function t(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}var ServiceWorkerController=function(){function e(){_classCallCheck(this,e),this._registerServiceWorker()}return _createClass(e,[{key:"_registerServiceWorker",value:function(){navigator.serviceWorker&&navigator.serviceWorker.register("sw.js")}}]),e}();new ServiceWorkerController;
"use strict";!function(){function u(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function i(n,o,r){var i,e=new Promise(function(e,t){u(i=n[o].apply(n,r)).then(e,t)});return e.request=i,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,o,e){e.forEach(function(e){e in o.prototype&&(t.prototype[e]=function(){return i(this[n],e,arguments)})})}function n(t,n,o,e){e.forEach(function(e){e in o.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function o(e,o,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[o],(t=i(e,n,arguments)).then(function(e){if(e)return new c(e,t.request)});var e,t})})}function r(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function a(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function p(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new a(n)}function f(e){this._db=e}e(r,"_index",["name","keyPath","multiEntry","unique"]),t(r,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),o(r,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(c,"_cursor",["direction","key","primaryKey","value"]),t(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(c.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),u(t._request).then(function(e){if(e)return new c(e,t._request)})})})}),s.prototype.createIndex=function(){return new r(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new r(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),o(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),a.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(a,"_tx",["objectStoreNames","mode"]),n(a,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(p,"_db",["name","version","objectStoreNames"]),n(p,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new a(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(i){[s,r].forEach(function(e){e.prototype[i.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],o=this._store||this._index,r=o[i].apply(o,t.slice(0,-1));r.onsuccess=function(){n(r.result)}}})}),[r,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var o=this,r=[];return new Promise(function(t){o.iterateCursor(e,function(e){e?(r.push(e.value),void 0===n||r.length!=n?e.continue():t(r)):t(r)})})})});var d={open:function(e,t,n){var o=i(indexedDB,"open",[e,t]),r=o.request;return r.onupgradeneeded=function(e){n&&n(new p(r.result,e.oldVersion,r.transaction))},o.then(function(e){return new f(e)})},delete:function(e){return i(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}();
"use strict";var _slicedToArray=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},_createClass=function(){function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}();function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var DBHelper=function(){function t(){_classCallCheck(this,t),this.dbPromise=idb.open("restaurant-reviews",1,function(t){t.createObjectStore("restaurants",{keyPath:"id"}),t.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id"),t.createObjectStore("reviews-to-submit",{keyPath:"cache_id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id"),t.createObjectStore("favourite-to-submit",{keyPath:"restaurant_id"})})}return _createClass(t,[{key:"fetchRestaurants",value:function(e){var r=this;this.dbPromise.then(function(t){return t.transaction("restaurants").objectStore("restaurants").getAll()}).then(function(t){e([!0,t]),fetch(r.DATABASE_URL+"restaurants").then(function(t){return t.json()}).then(function(c){e([!0,c]),r.dbPromise.then(function(t){var e=t.transaction("restaurants","readwrite"),r=e.objectStore("restaurants"),n=!0,i=!1,a=void 0;try{for(var o,u=c[Symbol.iterator]();!(n=(o=u.next()).done);n=!0){var s=o.value;r.put(s)}}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e.complete})}).catch(function(t){return e([!1,t])})})}},{key:"fetchRestaurant",value:function(e,r){var n=this;this.dbPromise.then(function(t){return t.transaction("restaurants").objectStore("restaurants").get(parseInt(r))}).then(function(t){e([!0,t]),fetch(n.DATABASE_URL+"restaurants/"+r).then(function(t){return t.json()}).then(function(r){e([!0,r]),n.dbPromise.then(function(t){var e=t.transaction("restaurants","readwrite");return e.objectStore("restaurants").put(r),e.complete})}).catch(function(t){return e([!1,t])})})}},{key:"fetchRestaurantById",value:function(t,a){this.fetchRestaurant(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),r=e[0],n=void 0!==r&&r,i=e[1];a(n,i)},t)}},{key:"fetchReviewsByRestaurantId",value:function(e,r){var n=this;this.dbPromise.then(function(t){return t.transaction("reviews").objectStore("reviews").index("restaurant_id").getAll(parseInt(e))}).then(function(t){r([!0,t]),fetch(n.DATABASE_URL+"reviews/?restaurant_id="+e).then(function(t){return t.json()}).then(function(c){r([!0,c]),n.dbPromise.then(function(t){var e=t.transaction("reviews","readwrite"),r=e.objectStore("reviews"),n=!0,i=!1,a=void 0;try{for(var o,u=c[Symbol.iterator]();!(n=(o=u.next()).done);n=!0){var s=o.value;r.put(s)}}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e.complete})}).catch(function(t){return r([!1,t])})})}},{key:"fetchRestaurantByCuisine",value:function(o,u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),r=e[0],n=void 0!==r&&r,i=e[1];if(n){var a=i.filter(function(t){return t.cuisine_type==o});u(n,a)}else u(n,i)})}},{key:"fetchRestaurantByNeighborhood",value:function(o,u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),r=e[0],n=void 0!==r&&r,i=e[1];if(n){var a=i.filter(function(t){return t.neighborhood==o});u(n,a)}else u(n,i)})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(o,u,s){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),r=e[0],n=void 0!==r&&r,i=e[1];if(n){var a=i;"all"!=o&&(a=a.filter(function(t){return t.cuisine_type==o})),"all"!=u&&(a=a.filter(function(t){return t.neighborhood==u})),s(n,a)}else s(n,i)})}},{key:"fetchNeighborhoods",value:function(u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),r=e[0],n=void 0!==r&&r,i=e[1];if(n){var a=i.map(function(t,e){return i[e].neighborhood}),o=a.filter(function(t,e){return a.indexOf(t)==e});u(n,o)}else u(n,i)})}},{key:"fetchCuisines",value:function(u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),r=e[0],n=void 0!==r&&r,i=e[1];if(n){var a=i.map(function(t,e){return i[e].cuisine_type}),o=a.filter(function(t,e){return a.indexOf(t)==e});u(n,o)}else u(n,i)})}},{key:"urlForRestaurant",value:function(t){return"./restaurant.html?id="+t.id}},{key:"imageUrlForRestaurant",value:function(t){return"/img/"+t.photograph+".jpf"}},{key:"imageNameForRestaurant",value:function(t){return(t.photograph||"5.jpf").replace(/\.jpf$/,"")}},{key:"mapMarkerForRestaurant",value:function(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:this.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}},{key:"submitReview",value:function(t,e){fetch(this.DATABASE_URL+"reviews",{method:"POST",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify(t)}).then(function(t){return t.json()}).then(function(t){e([!0,t])}).catch(function(t){return e([!1,t])})}},{key:"cacheReviewSubmission",value:function(e){this.dbPromise.then(function(t){return t.transaction("reviews-to-submit","readwrite").objectStore("reviews-to-submit").put(e)}).catch(function(t){return console.error("Wasn't able to cache review submission")})}},{key:"deleteCachedReview",value:function(e){return this.dbPromise.then(function(t){return t.transaction("reviews-to-submit","readwrite").objectStore("reviews-to-submit").delete(e)}).catch(function(t){return console.error("Wasn't able to delete cached review submission of ID: "+e,t)})}},{key:"submitCachedReview",value:function(e){var u=this;this.dbPromise.then(function(t){return t.transaction("reviews-to-submit").objectStore("reviews-to-submit").index("restaurant_id").getAll(e)}).then(function(t){if(t.length){var e=!0,r=!1,n=void 0;try{for(var a,i=function(){var i=a.value;u.submitReview(i,function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),r=e[0],n=void 0!==r&&r;e[1];n&&u.deleteCachedReview(i.cache_id)})},o=t[Symbol.iterator]();!(e=(a=o.next()).done);e=!0)i()}catch(t){r=!0,n=t}finally{try{!e&&o.return&&o.return()}finally{if(r)throw n}}}}).catch(function(t){return console.info("Wasn't able get cached review submissions of restaurant ID: "+e,t)})}},{key:"submitCachedFavouriteRestaurant",value:function(e){var r=this,n=this.dbPromise;n.then(function(t){return t.transaction("favourite-to-submit").objectStore("favourite-to-submit").get(e)}).then(function(t){t&&r.togglefavouriteRestaurant(e,t.is_favorite,function(t){t&&n.then(function(t){t.transaction("favourite-to-submit","readwrite").objectStore("favourite-to-submit").delete(e)})})})}},{key:"togglefavouriteRestaurant",value:function(r,n,i){var e=this;fetch(this.DATABASE_URL+"restaurants/"+r+"/?is_favorite="+n,{method:"PUT"}).then(function(t){return t.json()}).then(function(r){e.dbPromise.then(function(t){var e=t.transaction("restaurants","readwrite");return e.objectStore("restaurants").put(r),i&&i(e.complete),e.complete})}).catch(function(t){e.dbPromise.then(function(t){var e=t.transaction("favourite-to-submit","readwrite");return e.objectStore("favourite-to-submit","readwrite").put({restaurant_id:r,is_favorite:n}),i&&i(!1),e.complete})})}},{key:"DATABASE_URL",get:function(){return"//localhost:1337/"}}]),t}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
