"use strict";!function(){function u(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function i(n,o,r){var i,e=new Promise(function(e,t){u(i=n[o].apply(n,r)).then(e,t)});return e.request=i,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,o,e){e.forEach(function(e){e in o.prototype&&(t.prototype[e]=function(){return i(this[n],e,arguments)})})}function n(t,n,o,e){e.forEach(function(e){e in o.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function o(e,o,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[o],(t=i(e,n,arguments)).then(function(e){if(e)return new c(e,t.request)});var e,t})})}function r(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function a(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function p(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new a(n)}function f(e){this._db=e}e(r,"_index",["name","keyPath","multiEntry","unique"]),t(r,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),o(r,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(c,"_cursor",["direction","key","primaryKey","value"]),t(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(c.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),u(t._request).then(function(e){if(e)return new c(e,t._request)})})})}),s.prototype.createIndex=function(){return new r(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new r(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),o(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),a.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(a,"_tx",["objectStoreNames","mode"]),n(a,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(p,"_db",["name","version","objectStoreNames"]),n(p,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new a(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(i){[s,r].forEach(function(e){e.prototype[i.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],o=this._store||this._index,r=o[i].apply(o,t.slice(0,-1));r.onsuccess=function(){n(r.result)}}})}),[r,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var o=this,r=[];return new Promise(function(t){o.iterateCursor(e,function(e){e?(r.push(e.value),void 0===n||r.length!=n?e.continue():t(r)):t(r)})})})});var d={open:function(e,t,n){var o=i(indexedDB,"open",[e,t]),r=o.request;return r.onupgradeneeded=function(e){n&&n(new p(r.result,e.oldVersion,r.transaction))},o.then(function(e){return new f(e)})},delete:function(e){return i(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}();
"use strict";var _slicedToArray=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){i=!0,a=t}finally{try{!r&&u.return&&u.return()}finally{if(i)throw a}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},_createClass=function(){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}}();function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var DBHelper=function(){function t(){_classCallCheck(this,t),this.dbPromise=idb.open("restaurant-reviews",1,function(t){t.createObjectStore("restaurants",{keyPath:"id"}),t.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id"),t.createObjectStore("reviews-to-submit",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id")})}return _createClass(t,[{key:"fetchRestaurants",value:function(e){var n=this;this.dbPromise.then(function(t){return t.transaction("restaurants").objectStore("restaurants").getAll()}).then(function(t){e([!0,t]),fetch(n.DATABASE_URL+"restaurants").then(function(t){return t.json()}).then(function(c){e([!0,c]),n.dbPromise.then(function(t){var e=t.transaction("restaurants","readwrite"),n=e.objectStore("restaurants"),r=!0,i=!1,a=void 0;try{for(var o,u=c[Symbol.iterator]();!(r=(o=u.next()).done);r=!0){var s=o.value;n.put(s)}}catch(t){i=!0,a=t}finally{try{!r&&u.return&&u.return()}finally{if(i)throw a}}return e.complete})}).catch(function(t){return e([!1,t])})})}},{key:"fetchRestaurant",value:function(e,n){var r=this;this.dbPromise.then(function(t){return t.transaction("restaurants").objectStore("restaurants").get(parseInt(n))}).then(function(t){e([!0,t]),fetch(r.DATABASE_URL+"restaurants/"+n).then(function(t){return t.json()}).then(function(n){e([!0,n]),r.dbPromise.then(function(t){var e=t.transaction("restaurants","readwrite");return e.objectStore("restaurants").put(n),e.complete})}).catch(function(t){return e([!1,t])})})}},{key:"fetchRestaurantById",value:function(t,a){this.fetchRestaurant(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,i=e[1];a(r||!r,i)},t)}},{key:"fetchReviewsByRestaurantId",value:function(e,n){var r=this;this.dbPromise.then(function(t){return t.transaction("reviews").objectStore("reviews").index("restaurant_id").getAll(parseInt(e))}).then(function(t){n([!0,t]),fetch(r.DATABASE_URL+"reviews/?restaurant_id="+e).then(function(t){return t.json()}).then(function(c){n([!0,c]),r.dbPromise.then(function(t){var e=t.transaction("reviews","readwrite"),n=e.objectStore("reviews"),r=!0,i=!1,a=void 0;try{for(var o,u=c[Symbol.iterator]();!(r=(o=u.next()).done);r=!0){var s=o.value;n.put(s)}}catch(t){i=!0,a=t}finally{try{!r&&u.return&&u.return()}finally{if(i)throw a}}return e.complete})}).catch(function(t){return n([!1,t])})})}},{key:"fetchRestaurantByCuisine",value:function(o,u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,i=e[1];if(r){var a=i.filter(function(t){return t.cuisine_type==o});u(r,a)}else u(!r,i)})}},{key:"fetchRestaurantByNeighborhood",value:function(o,u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,i=e[1];if(r){var a=i.filter(function(t){return t.neighborhood==o});u(r,a)}else u(!r,i)})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(o,u,s){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,i=e[1];if(r){var a=i;"all"!=o&&(a=a.filter(function(t){return t.cuisine_type==o})),"all"!=u&&(a=a.filter(function(t){return t.neighborhood==u})),s(r,a)}else s(!r,i)})}},{key:"fetchNeighborhoods",value:function(u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,i=e[1];if(r){var a=i.map(function(t,e){return i[e].neighborhood}),o=a.filter(function(t,e){return a.indexOf(t)==e});u(r,o)}else u(!r,i)})}},{key:"fetchCuisines",value:function(u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,i=e[1];if(r){var a=i.map(function(t,e){return i[e].cuisine_type}),o=a.filter(function(t,e){return a.indexOf(t)==e});u(r,o)}else u(!r,i)})}},{key:"urlForRestaurant",value:function(t){return"./restaurant.html?id="+t.id}},{key:"imageUrlForRestaurant",value:function(t){return"/img/"+t.photograph+".jpf"}},{key:"imageNameForRestaurant",value:function(t){return(t.photograph||"5.jpf").replace(/\.jpf$/,"")}},{key:"mapMarkerForRestaurant",value:function(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:this.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}},{key:"submitReview",value:function(t,e){fetch(this.DATABASE_URL+"reviews",{method:"POST",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify(t)}).then(function(t){return t.json()}).then(function(t){e([!0,t])}).catch(function(t){return e([!1,t])})}},{key:"cacheReviewSubmission",value:function(e){this.dbPromise.then(function(t){return t.transaction("reviews-to-submit","readwrite").objectStore("reviews-to-submit").put(e)}).catch(function(t){return console.error("Wasn't able to cache review submission")})}},{key:"deleteCachedReview",value:function(e){return this.dbPromise.then(function(t){return t.transaction("reviews-to-submit","readwrite").objectStore("reviews-to-submit").delete(e)}).catch(function(t){return console.error("Wasn't able to delete cached review submission of ID: "+e,t)})}},{key:"submitCachedReview",value:function(e){var u=this;this.dbPromise.then(function(t){return t.transaction("reviews-to-submit").objectStore("reviews-to-submit").index("restaurant_id").getAll(e)}).then(function(t){if(t.length){var e=!0,n=!1,r=void 0;try{for(var a,i=function(){var i=a.value;u.submitReview(i,function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n;e[1];r&&u.deleteCachedReview(i.id)})},o=t[Symbol.iterator]();!(e=(a=o.next()).done);e=!0)i()}catch(t){n=!0,r=t}finally{try{!e&&o.return&&o.return()}finally{if(n)throw r}}}}).catch(function(t){return console.info("Wasn't able get cached review submissions of restaurant ID: "+e,t)})}},{key:"DATABASE_URL",get:function(){return"//localhost:1337/"}}]),t}();
"use strict";var _createClass=function(){function t(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}var ServiceWorkerController=function(){function e(){_classCallCheck(this,e),this._registerServiceWorker()}return _createClass(e,[{key:"_registerServiceWorker",value:function(){navigator.serviceWorker&&navigator.serviceWorker.register("sw.js")}}]),e}();new ServiceWorkerController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
