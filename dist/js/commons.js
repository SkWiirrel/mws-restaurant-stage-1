"use strict";!function(){function u(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function i(n,o,r){var i,e=new Promise(function(e,t){u(i=n[o].apply(n,r)).then(e,t)});return e.request=i,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,o,e){e.forEach(function(e){e in o.prototype&&(t.prototype[e]=function(){return i(this[n],e,arguments)})})}function n(t,n,o,e){e.forEach(function(e){e in o.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function o(e,o,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[o],(t=i(e,n,arguments)).then(function(e){if(e)return new c(e,t.request)});var e,t})})}function r(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function a(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function p(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new a(n)}function f(e){this._db=e}e(r,"_index",["name","keyPath","multiEntry","unique"]),t(r,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),o(r,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(c,"_cursor",["direction","key","primaryKey","value"]),t(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(c.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),u(t._request).then(function(e){if(e)return new c(e,t._request)})})})}),s.prototype.createIndex=function(){return new r(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new r(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),o(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),a.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(a,"_tx",["objectStoreNames","mode"]),n(a,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(p,"_db",["name","version","objectStoreNames"]),n(p,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new a(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(i){[s,r].forEach(function(e){e.prototype[i.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],o=this._store||this._index,r=o[i].apply(o,t.slice(0,-1));r.onsuccess=function(){n(r.result)}}})}),[r,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var o=this,r=[];return new Promise(function(t){o.iterateCursor(e,function(e){e?(r.push(e.value),void 0===n||r.length!=n?e.continue():t(r)):t(r)})})})});var d={open:function(e,t,n){var o=i(indexedDB,"open",[e,t]),r=o.request;return r.onupgradeneeded=function(e){n&&n(new p(r.result,e.oldVersion,r.transaction))},o.then(function(e){return new f(e)})},delete:function(e){return i(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}();
"use strict";var _slicedToArray=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=e[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(a)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},_createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var DBHelper=function(){function n(){_classCallCheck(this,n)}return _createClass(n,null,[{key:"fetchRestaurants",value:function(t){fetch(n.DATABASE_URL).then(function(e){return e.json()}).then(function(e){return t([!0,e])}).catch(function(e){return t([!1,e])})}},{key:"fetchRestaurantById",value:function(o,u){n.fetchRestaurants(function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],t=_slicedToArray(e,2),n=t[0],r=void 0!==n&&n,a=t[1];if(r){var i=a.find(function(e){return e.id==o});i?u(r,i):u(null,"Restaurant does not exist")}else u(!r,a)})}},{key:"fetchRestaurantByCuisine",value:function(o,u){n.fetchRestaurants(function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],t=_slicedToArray(e,2),n=t[0],r=void 0!==n&&n,a=t[1];if(r){var i=a.filter(function(e){return e.cuisine_type==o});u(r,i)}else u(!r,a)})}},{key:"fetchRestaurantByNeighborhood",value:function(o,u){n.fetchRestaurants(function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],t=_slicedToArray(e,2),n=t[0],r=void 0!==n&&n,a=t[1];if(r){var i=a.filter(function(e){return e.neighborhood==o});u(r,i)}else u(!r,a)})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(o,u,c){n.fetchRestaurants(function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],t=_slicedToArray(e,2),n=t[0],r=void 0!==n&&n,a=t[1];if(r){var i=a;"all"!=o&&(i=i.filter(function(e){return e.cuisine_type==o})),"all"!=u&&(i=i.filter(function(e){return e.neighborhood==u})),c(r,i)}else c(!r,a)})}},{key:"fetchNeighborhoods",value:function(u){n.fetchRestaurants(function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],t=_slicedToArray(e,2),n=t[0],r=void 0!==n&&n,a=t[1];if(r){var i=a.map(function(e,t){return a[t].neighborhood}),o=i.filter(function(e,t){return i.indexOf(e)==t});u(r,o)}else u(!r,a)})}},{key:"fetchCuisines",value:function(u){n.fetchRestaurants(function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],t=_slicedToArray(e,2),n=t[0],r=void 0!==n&&n,a=t[1];if(r){var i=a.map(function(e,t){return a[t].cuisine_type}),o=i.filter(function(e,t){return i.indexOf(e)==t});u(r,o)}else u(!r,a)})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.photograph+".jpg"}},{key:"imageNameForRestaurant",value:function(e){return e.photograph.replace(/\.jpg$/,"")}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:n.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"DATABASE_URL",get:function(){return"http://192.168.1.132:1337/restaurants"}}]),n}();
"use strict";var _createClass=function(){function t(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}var ServiceWorkerController=function(){function e(){_classCallCheck(this,e),this._registerServiceWorker()}return _createClass(e,[{key:"_registerServiceWorker",value:function(){navigator.serviceWorker&&navigator.serviceWorker.register("sw.js")}}]),e}();new ServiceWorkerController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
