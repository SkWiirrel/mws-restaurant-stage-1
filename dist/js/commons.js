"use strict";!function(){function u(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function i(n,o,r){var i,e=new Promise(function(e,t){u(i=n[o].apply(n,r)).then(e,t)});return e.request=i,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,o,e){e.forEach(function(e){e in o.prototype&&(t.prototype[e]=function(){return i(this[n],e,arguments)})})}function n(t,n,o,e){e.forEach(function(e){e in o.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function o(e,o,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[o],(t=i(e,n,arguments)).then(function(e){if(e)return new c(e,t.request)});var e,t})})}function r(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function a(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function p(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new a(n)}function f(e){this._db=e}e(r,"_index",["name","keyPath","multiEntry","unique"]),t(r,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),o(r,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(c,"_cursor",["direction","key","primaryKey","value"]),t(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(c.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),u(t._request).then(function(e){if(e)return new c(e,t._request)})})})}),s.prototype.createIndex=function(){return new r(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new r(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),o(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),a.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(a,"_tx",["objectStoreNames","mode"]),n(a,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(p,"_db",["name","version","objectStoreNames"]),n(p,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new a(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(i){[s,r].forEach(function(e){e.prototype[i.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],o=this._store||this._index,r=o[i].apply(o,t.slice(0,-1));r.onsuccess=function(){n(r.result)}}})}),[r,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var o=this,r=[];return new Promise(function(t){o.iterateCursor(e,function(e){e?(r.push(e.value),void 0===n||r.length!=n?e.continue():t(r)):t(r)})})})});var d={open:function(e,t,n){var o=i(indexedDB,"open",[e,t]),r=o.request;return r.onupgradeneeded=function(e){n&&n(new p(r.result,e.oldVersion,r.transaction))},o.then(function(e){return new f(e)})},delete:function(e){return i(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}();
"use strict";var _slicedToArray=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=t[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){a=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(a)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},_createClass=function(){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}}();function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var DBHelper=function(){function t(){_classCallCheck(this,t),this.dbPromise=idb.open("restaurant-reviews",1,function(t){t.createObjectStore("restaurants",{keyPath:"id"})})}return _createClass(t,[{key:"fetchRestaurants",value:function(e){var n=this;this.dbPromise.then(function(t){return t.transaction("restaurants").objectStore("restaurants").getAll()}).then(function(t){e([!0,t]),fetch(n.DATABASE_URL).then(function(t){return t.json()}).then(function(c){e([!0,c]),n.dbPromise.then(function(t){var e=t.transaction("restaurants","readwrite"),n=e.objectStore("restaurants"),r=!0,a=!1,i=void 0;try{for(var o,u=c[Symbol.iterator]();!(r=(o=u.next()).done);r=!0){var s=o.value;n.put(s)}}catch(t){a=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(a)throw i}}return e.complete})}).catch(function(t){return e([!1,t])})})}},{key:"fetchRestaurant",value:function(e,n){var r=this;this.dbPromise.then(function(t){return t.transaction("restaurants").objectStore("restaurants").get(parseInt(n))}).then(function(t){e([!0,t]),fetch(r.DATABASE_URL+"/"+n).then(function(t){return t.json()}).then(function(n){e([!0,n]),r.dbPromise.then(function(t){var e=t.transaction("restaurants","readwrite");return e.objectStore("restaurants").put(n),e.complete})}).catch(function(t){return e([!1,t])})})}},{key:"fetchRestaurantById",value:function(t,i){this.fetchRestaurant(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,a=e[1];i(r||!r,a)},t)}},{key:"fetchRestaurantByCuisine",value:function(o,u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,a=e[1];if(r){var i=a.filter(function(t){return t.cuisine_type==o});u(r,i)}else u(!r,a)})}},{key:"fetchRestaurantByNeighborhood",value:function(o,u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,a=e[1];if(r){var i=a.filter(function(t){return t.neighborhood==o});u(r,i)}else u(!r,a)})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(o,u,s){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,a=e[1];if(r){var i=a;"all"!=o&&(i=i.filter(function(t){return t.cuisine_type==o})),"all"!=u&&(i=i.filter(function(t){return t.neighborhood==u})),s(r,i)}else s(!r,a)})}},{key:"fetchNeighborhoods",value:function(u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,a=e[1];if(r){var i=a.map(function(t,e){return a[e].neighborhood}),o=i.filter(function(t,e){return i.indexOf(t)==e});u(r,o)}else u(!r,a)})}},{key:"fetchCuisines",value:function(u){this.fetchRestaurants(function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=_slicedToArray(t,2),n=e[0],r=void 0!==n&&n,a=e[1];if(r){var i=a.map(function(t,e){return a[e].cuisine_type}),o=i.filter(function(t,e){return i.indexOf(t)==e});u(r,o)}else u(!r,a)})}},{key:"urlForRestaurant",value:function(t){return"./restaurant.html?id="+t.id}},{key:"imageUrlForRestaurant",value:function(t){return"/img/"+t.photograph+".jpf"}},{key:"imageNameForRestaurant",value:function(t){return(t.photograph||"5.jpf").replace(/\.jpf$/,"")}},{key:"mapMarkerForRestaurant",value:function(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:this.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}},{key:"DATABASE_URL",get:function(){return"//localhost:1337/restaurants"}}]),t}();
"use strict";var _createClass=function(){function t(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}var ServiceWorkerController=function(){function e(){_classCallCheck(this,e),this._registerServiceWorker()}return _createClass(e,[{key:"_registerServiceWorker",value:function(){navigator.serviceWorker&&navigator.serviceWorker.register("sw.js")}}]),e}();new ServiceWorkerController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlkYi5qcyIsImRiaGVscGVyLmpzIiwiU2VydmljZVdvcmtlckNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsicHJvbWlzaWZ5UmVxdWVzdCIsInJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uc3VjY2VzcyIsInJlc3VsdCIsIm9uZXJyb3IiLCJlcnJvciIsInByb21pc2lmeVJlcXVlc3RDYWxsIiwib2JqIiwibWV0aG9kIiwiYXJncyIsInAiLCJhcHBseSIsInRoZW4iLCJwcm94eVByb3BlcnRpZXMiLCJQcm94eUNsYXNzIiwidGFyZ2V0UHJvcCIsInByb3BlcnRpZXMiLCJmb3JFYWNoIiwicHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiZ2V0IiwidGhpcyIsInNldCIsInZhbCIsInByb3h5UmVxdWVzdE1ldGhvZHMiLCJDb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInByb3h5TWV0aG9kcyIsInByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMiLCJ2YWx1ZSIsIkN1cnNvciIsIkluZGV4IiwiaW5kZXgiLCJfaW5kZXgiLCJfY3Vyc29yIiwiY3Vyc29yIiwiY29tcGxldGUiLCJzdG9yZSIsImlkYlRyYW5zYWN0aW9uIiwiVHJhbnNhY3Rpb24iLCJfdHgiLCJvbmNvbXBsZXRlIiwib25hYm9ydCIsIk9iamVjdFN0b3JlIiwiaXRlbXMiLCJkYiIsIm9sZFZlcnNpb24iLCJ0cmFuc2FjdGlvbiIsIl9kYiIsImluc3RhbmNlIiwiaXRlcmF0ZUN1cnNvciIsIm9wZW4iLCJEQiIsIklEQkluZGV4IiwiSURCQ3Vyc29yIiwibWV0aG9kTmFtZSIsIl9yZXF1ZXN0IiwiSURCT2JqZWN0U3RvcmUiLCJfc3RvcmUiLCJJREJUcmFuc2FjdGlvbiIsIlVwZ3JhZGVEQiIsIm5hdGl2ZU9iamVjdCIsImZ1bmNOYW1lIiwib2JqZWN0U3RvcmUiLCJjcmVhdGVPYmplY3RTdG9yZSIsImNvdW50IiwidW5kZWZpbmVkIiwiSURCRGF0YWJhc2UiLCJvbnVwZ3JhZGVuZWVkZWQiLCJ1cGdyYWRlQ2FsbGJhY2siLCJkZWxldGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCIsInJlcGxhY2UiLCJzZWxmIiwiYXJyIiwiQXJyYXkiLCJzbGljZSIsImNhbGwiLCJjYWxsYmFjayIsImxlbmd0aCIsImdldEFsbCIsInF1ZXJ5IiwicHVzaCIsImNvbnRpbnVlIiwiZXhwIiwibmFtZSIsInZlcnNpb24iLCJpbmRleGVkREIiLCJldmVudCIsImlkYiIsIkRCSGVscGVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiZGJQcm9taXNlIiwidXBncmFkZURiIiwia2V5UGF0aCIsIl90aGlzIiwicmVzdGF1cmFudHMiLCJmZXRjaCIsIkRBVEFCQVNFX1VSTCIsInJlc3BvbnNlIiwianNvbiIsImRhdGEiLCJ0eCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJlcnIiLCJfaXRlcmF0b3IiLCJyZXR1cm4iLCJjYXRjaCIsImlkIiwiX3RoaXMyIiwicmVzdGF1cmFudCIsInBhcnNlSW50IiwicHV0IiwiZmV0Y2hSZXN0YXVyYW50IiwiX3JlZiIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkiLCJfcmVmMiQiLCJvayIsImN1aXNpbmUiLCJmZXRjaFJlc3RhdXJhbnRzIiwiX3JlZjMiLCJfcmVmNCIsIl9yZWY0JCIsInJlc3VsdHMiLCJmaWx0ZXIiLCJyIiwiY3Vpc2luZV90eXBlIiwibmVpZ2hib3Job29kIiwiX3JlZjUiLCJfcmVmNiIsIl9yZWY2JCIsIl9yZWY3IiwiX3JlZjgiLCJfcmVmOCQiLCJfcmVmOSIsIl9yZWYxMCIsIl9yZWYxMCQiLCJuZWlnaGJvcmhvb2RzIiwibWFwIiwidiIsImkiLCJpbmRleE9mIiwiX3JlZjExIiwiX3JlZjEyIiwiX3JlZjEyJCIsInVuaXF1ZUN1aXNpbmVzIiwiY3Vpc2luZXMiLCJwaG90b2dyYXBoIiwiZ29vZ2xlIiwibWFwcyIsIk1hcmtlciIsInBvc2l0aW9uIiwibGF0bG5nIiwidGl0bGUiLCJ1cmwiLCJ1cmxGb3JSZXN0YXVyYW50IiwiRFJPUCIsIlNlcnZpY2VXb3JrZXJDb250cm9sbGVyIiwiX3JlZ2lzdGVyU2VydmljZVdvcmtlciIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsY0FFQyxXQUtDLFNBQVNBLEVBQWlCQyxHQUN4QixPQUFPLElBQUlDLFFBQVEsU0FBQUMsRUFBQUMsR0FDakJILEVBQVFJLFVBQVksV0FDbEJGLEVBQVFGLEVBQVFLLFNBR2xCTCxFQUFRTSxRQUFVLFdBQ2hCSCxFQUFPSCxFQUFRTyxVQUtyQixTQUFTQyxFQUFxQkMsRUFBS0MsRUFBUUMsR0FDekMsSUFBSVgsRUFDQVksRUFBSSxJQUFJWCxRQUFRLFNBQUFDLEVBQUFDLEdBRWxCSixFQURBQyxFQUFVUyxFQUFJQyxHQUFRRyxNQUFNSixFQUFLRSxJQUNQRyxLQUFLWixFQUFTQyxLQUkxQyxPQURBUyxFQUFFWixRQUFVQSxFQUNMWSxFQVdULFNBQVNHLEVBQWdCQyxFQUFZQyxFQUFZQyxHQUMvQ0EsRUFBV0MsUUFBUSxTQUFBQyxHQUNqQkMsT0FBT0MsZUFBZU4sRUFBV08sVUFBV0gsRUFBTSxDQUNoREksSUFBSyxXQUNILE9BQU9DLEtBQUtSLEdBQVlHLElBRTFCTSxJQUFLLFNBQUFDLEdBQ0hGLEtBQUtSLEdBQVlHLEdBQVFPLE9BTWpDLFNBQVNDLEVBQW9CWixFQUFZQyxFQUFZWSxFQUFhWCxHQUNoRUEsRUFBV0MsUUFBUSxTQUFBQyxHQUNYQSxLQUFRUyxFQUFZTixZQUMxQlAsRUFBV08sVUFBVUgsR0FBUSxXQUMzQixPQUFPWixFQUFxQmlCLEtBQUtSLEdBQWFHLEVBQU1VLGVBSzFELFNBQVNDLEVBQWFmLEVBQVlDLEVBQVlZLEVBQWFYLEdBQ3pEQSxFQUFXQyxRQUFRLFNBQUFDLEdBQ1hBLEtBQVFTLEVBQVlOLFlBQzFCUCxFQUFXTyxVQUFVSCxHQUFRLFdBQzNCLE9BQU9LLEtBQUtSLEdBQVlHLEdBQU1QLE1BQU1ZLEtBQUtSLEdBQWFhLGVBSzVELFNBQVNFLEVBQTBCaEIsRUFBWUMsRUFBWVksRUFBYVgsR0FDdEVBLEVBQVdDLFFBQVEsU0FBQUMsR0FDWEEsS0FBUVMsRUFBWU4sWUFDMUJQLEVBQVdPLFVBQVVILEdBQVEsV0FDM0IsT0EzQzhCWCxFQTJDSWdCLEtBQUtSLElBMUN2Q0wsRUFBSUosRUFBcUJDLEVBMEMyQlcsRUFBTVUsWUF6Q3JEaEIsS0FBSyxTQUFBbUIsR0FDWixHQUFLQSxFQUNMLE9BQU8sSUFBSUMsRUFBT0QsRUFBT3JCLEVBQUVaLFdBSi9CLElBQW9DUyxFQUM5QkcsTUErQ04sU0FBU3VCLEVBQU1DLEdBQ2JYLEtBQUtZLE9BQVNELEVBNkNaLFNBQUl6QixFQUFPbUIsRUFBWDlCLEdBQ0F5QixLQUFBYSxRQUFPckMsRUFDTHNDLEtBQUFBLFNBQU9ELEVBbURYLFNBQUtFLEVBQVdDLEdBQ2RDLEtBQUFBLE9BQUFBLEVBbURGLFNBQU9DLEVBQUlBLEdBRGJsQixLQUFBbUIsSUFBQUYsRUFuREVqQixLQUFLZSxTQUFXLElBQUl2QyxRQUFRLFNBQVNDLEVBQVNDLEdBdURoRFksRUFBQThCLFdBQ0UsV0F0REkzQyxLQUVGd0MsRUFBZXBDLFFBQVUsV0E2RDdCSCxFQUFBdUMsRUFBQW5DLFFBRUNtQyxFQUFjSSxRQUFBLFdBQ1pDLEVBQUFBLEVBQW9CNUIsVUFrQm5CLFNBQUk2QixFQUFKQyxFQUFBQyxFQUFBQyxHQTNERjFCLEtBQUsyQixJQUFNSCxFQTZEVHhCLEtBQUF5QixXQUFXakQsRUFDVG9ELEtBQUFBLFlBQVNDLElBQUFBLEVBQXFCSCxHQWtCbENJLFNBQU1DLEVBQUFQLEdBQ0p4QixLQUFBMkIsSUFBUTVDLEVBM01aTyxFQUFnQm9CLEVBQU8sU0FBVSxDQUMvQixPQU1GUCxVQUpFLGFBWUZJLFdBTUVKLEVBQWVXLEVBQWYsU0FBQWtCLFNBQUEsQ0FDQSxNQUNELFNBYkMsU0FlRjFDLGFBYkUsVUF5QkZpQixFQUFBRyxFQUFBLFNBQUFzQixTQUFBLENBQ0MsYUFDQyxrQkFRTTFDLEVBQU9tQixFQUFJQSxVQUFjSyxDQUMxQixZQUNGLE1BQ0YsYUFaSCxVQWdCRVgsRUFBY2EsRUFBZCxVQUFBaUIsVUFBQSxDQUNELFNBckJDLFdBSUYsQ0FBQyxVQUFXLFdBQVksc0JBQXNCdkMsUUFBUSxTQUFTd0MsR0F1Qi9EWixLQUFzQlgsVUFBUWIsWUFDNUJXLEVBQU9YLFVBQVVvQyxHQUFZdkIsV0FEL0IsSUFBQUcsRUFBQWQsS0FuQlFkLEVBQU9tQixVQXVCZmYsT0FBQUEsUUFBZ0JnQyxVQUFhakMsS0FBQSxXQU83QmMsT0E1Qk1XLEVBQU9ELFFBQVFxQixHQUFZOUMsTUFBTTBCLEVBQU9ELFFBQVMzQixHQTRCdkRpQixFQUFvQm1CLEVBQWFhLFVBQVVDLEtBQUFBLFNBQ3pDNUIsR0EzQk0sR0FBS0EsRUFzQ2JELE9BQUFBLElBQUFBLEVBQTBCZSxFQUFBQSxFQUFhYSxrQkFlbkNsQixFQUFBQSxVQUFlcEMsWUFBVSxXQUN2QkgsT0FBQUEsSUFBT3VDLEVBQUFBLEtBQUFBLE9BQWVuQyxZQUF0Qk0sTUFBQVksS0FBQXFDLE9BQUFoQyxhQUdBM0IsRUFBQUEsVUFBT3VDLE1BQWVuQyxXQUN2QixPQUZELElBQUE0QixFQUFBVixLQUFBcUMsT0FBQTFCLE1BQUF2QixNQUFBWSxLQUFBcUMsT0FBQWhDLGFBckNKZixFQUFnQmdDLEVBQWEsU0FBVSxDQTJDdkNKLE9BQ0UsVUFERixhQXZDRSxrQkFnREZaLEVBQWFZLEVBQW9Cb0IsU0FBQUEsZUFBakMsQ0E1Q0UsTUFnREYsTUFDRSxTQUNBLFFBQ0EsTUFDRCxTQTlDQyxTQWdERkMsYUFDRSxVQUdGakQsRUFBQWdDLEVBQ0UsU0FDQWMsZUFDQSxDQWpEQSxhQW9ERjlCLGtCQU1FQSxFQUFXa0IsRUFBWCxTQUFBWSxlQUFBLENBQ0QsZ0JBd0JLbEIsRUFBSTNDLFVBQVVpRSxZQUFhQyxXQUMzQmxFLE9BQUFBLElBQUFBLEVBQUF5QixLQUFvQm1CLElBQUF1QixZQUFXdEQsTUFBQVksS0FBQW1CLElBQUFkLGFBR2hDZixFQVJENEIsRUFBQSxNQUFBLENBU0QsbUJBWEgsU0FlQVosRUFBUWdCLEVBQWE1QixNQUFRNEMsZUFBU2xDLENBQ3BDLFVBU1FtQyxFQUFBekMsVUFBQTZDLGtCQUFBLFdBQ0QsT0FBQSxJQUFBckIsRUFBQXRCLEtBQUEyQixJQUFBZ0Isa0JBQUF2RCxNQUFBWSxLQUFBMkIsSUFBQXRCLGFBR0RmLEVBQUlzRCxFQUFVQyxNQUFWLENBQ0ZwRSxPQUNBLFVBQ0QscUJBR0o2QixFQWREaUMsRUFBQSxNQUFBTyxZQUFBLENBZUQsb0JBckJILFVBNkJJdkUsRUFBQUEsVUFBUXdFLFlBQVIsV0FDRSxPQUFBLElBQUlDLEVBQUpoRCxLQUFxQjJCLElBQUFELFlBQUF0QyxNQUFBWSxLQUFBMkIsSUFBQXRCLGFBR3RCZixFQUpEeUMsRUFBQSxNQUFBLENBdkRGLE9BNkRFLFVBQ0UscUJBR0prQixFQUFRbEIsRUFBQSxNQUFBZSxZQUFlLENBQ3JCLFVBS0ZJLENBQUFBLGFBQU9DLGlCQUFQekQsUUFBQSxTQUFBK0MsR0FDQVMsQ0FBQUEsRUFBQXhDLEdBQWUwQyxRQUFVRixTQUFPQyxHQUZsQy9DLEVBR09OLFVBQUEyQyxFQUFBWSxRQUFBLE9BQUEsWUFBQSxXQUNMQyxJQWhUZUMsRUFnVGZyRSxHQWhUZXFFLEVBZ1RmbEQsVUEvU09tRCxNQUFNMUQsVUFBVTJELE1BQU1DLEtBQUtILElBZ1RuQ0ksRUFBQXpFLEVBQUFBLEVBQUEwRSxPQUFBLEdBbFRIcEIsRUFBQXhDLEtBQUFxQyxRQUFBckMsS0FBQVksT0F3UFlyQyxFQUFVaUUsRUFBYUMsR0FBVXJELE1BQU1vRCxFQUFjdEQsRUFBS3VFLE1BQU0sR0FBSSxJQUN4RWxGLEVBQVFJLFVBQVksV0FDbEJnRixFQUFTcEYsRUFBUUssY0FPekIsQ0FBQzhCLEVBQU9ZLEdBQWE1QixRQUFRLFNBQVNVLEdBQ2hDQSxFQUFZTixVQUFVK0QsU0FDMUJ6RCxFQUFZTixVQUFVK0QsT0FBUyxTQUFTQyxFQUFPbEIsR0FDN0MsSUFBSWhCLEVBQVc1QixLQUNYdUIsRUFBUSxHQUVaLE9BQU8sSUFBSS9DLFFBQVEsU0FBU0MsR0FDMUJtRCxFQUFTQyxjQUFjaUMsRUFBTyxTQUFTaEQsR0FDaENBLEdBSUxTLEVBQU13QyxLQUFLakQsRUFBT04sWUFFSnFDLElBQVZELEdBQXVCckIsRUFBTXFDLFFBQVVoQixFQUkzQzlCLEVBQU9rRCxXQUhMdkYsRUFBUThDLElBTlI5QyxFQUFROEMsV0FlbEIsSUFBSTBDLEVBQU0sQ0FDUm5DLEtBQU0sU0FBU29DLEVBQU1DLEVBQVNuQixHQUM1QixJQUFJN0QsRUFBSUosRUFBcUJxRixVQUFXLE9BQVEsQ0FBQ0YsRUFBTUMsSUFDbkQ1RixFQUFVWSxFQUFFWixRQVFoQixPQU5BQSxFQUFRd0UsZ0JBQWtCLFNBQVNzQixHQUM3QnJCLEdBQ0ZBLEVBQWdCLElBQUlULEVBQVVoRSxFQUFRSyxPQUFReUYsRUFBTTVDLFdBQVlsRCxFQUFRbUQsZUFJckV2QyxFQUFFRSxLQUFLLFNBQVNtQyxHQUNyQixPQUFPLElBQUlPLEVBQUdQLE1BR2xCeUIsT0FBUSxTQUFTaUIsR0FDZixPQUFPbkYsRUFBcUJxRixVQUFXLGlCQUFrQixDQUFDRixNQUl4QyxvQkFBWGhCLFFBQ1RBLE9BQU9DLFFBQVVjLEVBQ2pCZixPQUFPQyxRQUFRQyxRQUFVRixPQUFPQyxTQUVoQ0csS0FBS2dCLElBQU1MLEVBalRkOzR4QkNHS00sb0JBRUosU0FBQUEsSUFBY0MsZ0JBQUF4RSxLQUFBdUUsR0FQaEJ2RSxLQUFBeUUsVUFBQUgsSUFBQXhDLEtBQUEscUJBQUEsRUFBQSxTQUFBNEMsR0FTTUEsRUFBVS9CLGtCQUFrQixjQUFlLENBUGpEZ0MsUUFBQSx1RUF5Qm1CaEIsR0FBVSxJQUFBaUIsRUFBQTVFLEtBR3pCQSxLQUFLeUUsVUFBVXBGLEtBQUssU0FBQW1DLEdBRWxCLE9BQU9BLEVBQUdFLFlBQVksZUFBZWdCLFlBQVksZUFBZW1CLFdBUnBFeEUsS0FBQSxTQUFBd0YsR0FhSWxCLEVBQVMsRUFBQyxFQUFNa0IsSUFSbEJDLE1BQUFGLEVBQUFHLGNBQ0ExRixLQUFLb0YsU0FBQUEsR0FBQUEsT0FBZU8sRUFBQUMsU0FZZjVGLEtBQUssU0FBQTZGLEdBVlJ2QixFQUFVakMsRUFBQUEsRUFBQUEsSUFJVmtELEVBQUFILFVBQUFwRixLQUFBLFNBQUFtQyxHQUNBbUMsSUFBVXdCLEVBQUQzRCxFQUFPcUQsWUFBaEIsY0FBQSxhQVdZN0QsRUFBUW1FLEVBQUd6QyxZQUFZLGVBWm5DMEMsR0FBQSxFQUFBQyxHQUFBLEVBQUFDLE9BQUF6QyxFQUFBLElBSUFpQyxJQUFBQSxJQUFBQSxFQUFBQSxFQUNHekYsRUFESHlGLE9BQUFBLGNBQUFBLEdBQUFBLEVBQUFBLEVBQUFBLFFBQUFBLE1BQUFBLEdBQUFBLEVBQ1EsQ0FBQSxJQURHQyxFQUNIUSxFQUFBL0UsTUFBQVEsRUFBWWdFLElBQUFBLElBTHBCLE1BQUFRLEdBQUFILEdBQUEsRUFBQUMsRUFBQUUsRUFBQSxRQUFBLEtBQUFKLEdBQUFLLEVBQUFDLFFBQUFELEVBQUFDLFNBQUEsUUFBQSxHQUFBTCxFQUFBLE1BQUFDLEdBa0JNLE9BQU9ILEVBQUdwRSxhQVBWNEUsTUFBQSxTQUFBN0csR0FBQSxPQUFjNEMsRUFBQUEsRUFBQUEsRUFBWTVDLGdEQURGNkUsRUFBQWlDLEdBQUEsSUFBQUMsRUFBQTdGLEtBcUJoQ0EsS0FBS3lFLFVBQVVwRixLQUFLLFNBQUFtQyxHQWhCVlIsT0FBQUEsRUFBQUEsWUFBVThFLGVBQVZwRCxZQUFBLGVBQUEzQyxJQUFBZ0csU0FBQUgsTUFDRHZHLEtBQUEsU0FBQXlHLEdBTnVCbkMsRUFBQSxFQUFBLEVBQUFtQyxJQUFBaEIsTUFBQWUsRUFBQWQsYUFBQSxJQUFBYSxHQUFBdkcsS0FBQSxTQUFBMkYsR0FBQSxPQUFBQSxFQUFBQyxTQUFBNUYsS0FBQSxTQUFBNkYsR0FBQXZCLEVBQUEsRUFBQSxFQUFBdUIsSUFBQVcsRUFBQXBCLFVBQUFwRixLQUFBLFNBQUFtQyxHQUFBLElBQUEyRCxFQUFBM0QsRUFBQUUsWUFBQSxjQUFBLGFBc0N4QixPQXRDd0J5RCxFQUFBekMsWUFBQSxlQUFBc0QsSUFBQWQsR0FzQ2pCQyxFQUFHcEUsYUE1Q2hCNEUsTUFpQkdBLFNBQUFBLEdBQUFBLE9BQU1oQyxFQUFBLEVBQUEsRUFBQTdFLG9EQXFDTzhHLEVBQUlqQyxHQUV0QjNELEtBQUtpRyxnQkFBZ0IsV0FBaUMsSUFBQUMsRUFBQSxFQUFBN0YsVUFBQXVELGFBQUFmLElBQUF4QyxVQUFBLEdBQUFBLFVBQUEsR0FBUCxHQUFPOEYsRUFBQUMsZUFBQUYsRUFBQSxHQUFBRyxFQUFBRixFQUFBLEdBQS9CRyxPQUErQnpELElBQUF3RCxHQUFBQSxFQUFuQnJCLEVBQW1CbUIsRUFBQSxHQWhDMUJ4QyxFQWlDckIyQyxJQUNPQSxFQWxDY3RCLElBRzVCWSxvREFNRVcsRUFBQTVDLEdBRVEzRCxLQUFBd0csaUJBQXFCdkIsV0FBckIsSUFBQXdCLEVBQUEsRUFBQXBHLFVBQUF1RCxhQUFBZixJQUFBeEMsVUFBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQXFHLEVBQUFOLGVBQUFLLEVBQUEsR0FBQUUsRUFBQUQsRUFBQSxHQUFxQnpCLE9BQXJCcEMsSUFBQThELEdBQUFBLEVBQUEzQixFQUFBMEIsRUFBQSxHQUFBLEdBQ0xySCxFQXNDSSxDQWxDSCxJQUFBdUgsRUFBS25DLEVBQWVvQyxPQUFBLFNBQUFDLEdBQUEsT0FBQUEsRUFBTUMsY0FBQVIsSUFDeEI1QyxFQUFNd0IsRUFBSzNELFFBSmJtQyxHQUFBQSxFQUFVcUIsMkRBVmhCZ0MsRUFBQXJELEdBNERBM0QsS0FBS3dHLGlCQUFpQixXQUFpQyxJQUFBUyxFQUFBLEVBQUE1RyxVQUFBdUQsYUFBQWYsSUFBQXhDLFVBQUEsR0FBQUEsVUFBQSxHQUFQLEdBQU82RyxFQUFBZCxlQUFBYSxFQUFBLEdBQUFFLEVBQUFELEVBQUEsR0FBL0JaLE9BQStCekQsSUFBQXNFLEdBQUFBLEVBQW5CbkMsRUFBbUJrQyxFQUFBLEdBcEN6RCxHQUFBWixFQXVDVyxDQUVMLElBQU1NLEVBQVU1QixFQUFTNkIsT0FBTyxTQUFBQyxHQUFBLE9BQUtBLEVBQUVFLGNBQWdCQSxJQUN2RHJELEVBQVMyQyxFQUFJTSxRQUpiakQsR0FBVTJDLEVBQUl0QixxRUFqQ29DdUIsRUFBQVMsRUFBQXJELEdBQ3BEM0QsS0FBQXdHLGlCQUFTLFdBQUEsSUFBQVksRUFBQSxFQUFBL0csVUFBQXVELGFBQUFmLElBQUF4QyxVQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUFBZ0gsRUFBQWpCLGVBQUFnQixFQUFBLEdBQUFFLEVBQUFELEVBQUEsR0FBQWYsT0FBQXpELElBQUF5RSxHQUFBQSxFQUFBdEMsRUFBQXFDLEVBQUEsR0FDUDFELEdBQUFBLEVBRUFBLENBQ0EsSUFBQWlELEVBQUE1QixFQUNELE9BQUF1QixJQUNBWCxFQVBIZ0IsRUFBQUMsT0FBQSxTQUFBQyxHQUFBLE9BQUFBLEVBQUFDLGNBQUFSLEtBdUR3QixPQUFoQlMsSUE3Q1ZKLEVBQUFBLEVBQUFDLE9BQUEsU0FBQUMsR0FBQSxPQUFBQSxFQUFBRSxjQUFBQSxLQWdETXJELEVBQVMyQyxFQUFJTSxRQXZEZGpELEdBQU0yQyxFQUFBdEIsZ0RBWThDckIsR0FBQTNELEtBQUF3RyxpQkFBQSxXQUFBLElBQUFlLEVBQUEsRUFBQWxILFVBQUF1RCxhQUFBZixJQUFBeEMsVUFBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQW1ILEVBQUFwQixlQUFBbUIsRUFBQSxHQUFBRSxFQUFBRCxFQUFBLEdBQUFsQixPQUFBekQsSUFBQTRFLEdBQUFBLEVBQTFCekMsRUFBMEJ3QyxFQUFBLEdBQUEsR0FBQWxCLEVBQ2hEQSxDQUVKLElBRkRvQixFQUVPMUMsRUFBQTJDLElBQUEsU0FBQUMsRUFBQUMsR0FBQSxPQUFBN0MsRUFBQTZDLEdBQUFiLGVBRUNKLEVBQW1CQyxFQUFPQSxPQUFBLFNBQUFlLEVBQUFDLEdBQUEsT0FBQUgsRUFBQUksUUFBQUYsSUFBQUMsSUFBQWxFLEVBQUEyQyxFQUFPUyxRQWtEdkNwRCxHQUFVMkMsRUFBSXRCLDJDQWNOckIsR0FFWjNELEtBQUt3RyxpQkFBaUIsV0FBaUMsSUFBQXVCLEVBQUEsRUFBQTFILFVBQUF1RCxhQUFBZixJQUFBeEMsVUFBQSxHQUFBQSxVQUFBLEdBQVAsR0FBTzJILEVBQUE1QixlQUFBMkIsRUFBQSxHQUFBRSxFQUFBRCxFQUFBLEdBQS9CMUIsT0FBK0J6RCxJQUFBb0YsR0FBQUEsRUFBbkJqRCxFQUFtQmdELEVBQUEsR0FDckQsR0FBSzFCLEVBRUUsQ0ExRFQsSUFBS0UsRUFBQUEsRUFBaUJtQixJQUFBLFNBQUFDLEVBQWlDQyxHQUFqQyxPQUFpQzdDLEVBQUE2QyxHQUFBZCxlQUFBbUIsRUFBQUMsRUFBQXRCLE9BQUEsU0FBQWUsRUFBQUMsR0FBQSxPQUFBTSxFQUFBTCxRQUFBRixJQUFBQyxJQUFBbEUsRUFBQTJDLEVBQUE0QixRQXlEbkR2RSxHQUFVMkMsRUFBSXRCLDhDQXBEUjRCLEdBQTBCLE1BQUEsd0JBQUtkLEVBQWtCa0IsaURBeUV2Q2xCLEdBbkV0QixNQUFBLFFBQUFBLEVBQUFzQyxXQUFBLHNEQXVFdUJ0QyxHQUNyQixPQUFRQSxFQUFXc0MsWUFBYyxTQUFTL0UsUUFBUSxTQUFVLG1EQW5FTHlDLEVBQUE2QixHQUluRCxPQUptRCxJQUFBVSxPQUFBQyxLQUFBQyxPQUFBLENBQUFDLFNBQUExQyxFQUFBMkMsT0FBQUMsTUFBbkIxRCxFQUFtQmQsS0E2RXJEeUUsSUFBSzNJLEtBQUs0SSxpQkFBaUI5QyxHQTVFM0I2QixJQUFBQSxFQUNFaEUsVUFBQUEsT0FBY3FCLEtBQUFBLFVBQWQ2RCw0Q0FySUgsTUFBQTtpWUNaQ0MsbUNBRUosU0FBQUEsSUFBY3RFLGdCQUFBeEUsS0FBQThJLEdBQ1o5SSxLQUFLK0ksK0ZBQUFBLFVBQUFBLGVBQ05DLFVBQUFDLGNBQUFDLFNBQUEsa0JBV0gsSUFBSUoiLCJmaWxlIjoiY29tbW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbihmdW5jdGlvbigpIHtcclxuICBmdW5jdGlvbiB0b0FycmF5KGFycikge1xyXG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcclxuICAgIHZhciByZXF1ZXN0O1xyXG4gICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgcmVxdWVzdCA9IG9ialttZXRob2RdLmFwcGx5KG9iaiwgYXJncyk7XHJcbiAgICAgIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkudGhlbihyZXNvbHZlLCByZWplY3QpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcC5yZXF1ZXN0ID0gcmVxdWVzdDtcclxuICAgIHJldHVybiBwO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcclxuICAgIHZhciBwID0gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpO1xyXG4gICAgcmV0dXJuIHAudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICBpZiAoIXZhbHVlKSByZXR1cm47XHJcbiAgICAgIHJldHVybiBuZXcgQ3Vyc29yKHZhbHVlLCBwLnJlcXVlc3QpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwcm94eVByb3BlcnRpZXMoUHJveHlDbGFzcywgdGFyZ2V0UHJvcCwgcHJvcGVydGllcykge1xyXG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb3h5Q2xhc3MucHJvdG90eXBlLCBwcm9wLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzW3RhcmdldFByb3BdW3Byb3BdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWwpIHtcclxuICAgICAgICAgIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0gPSB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcHJveHlSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xyXG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcclxuICAgICAgaWYgKCEocHJvcCBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XHJcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHByb3h5TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xyXG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcclxuICAgICAgaWYgKCEocHJvcCBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XHJcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0uYXBwbHkodGhpc1t0YXJnZXRQcm9wXSwgYXJndW1lbnRzKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xyXG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcclxuICAgICAgaWYgKCEocHJvcCBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XHJcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeUN1cnNvclJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEluZGV4KGluZGV4KSB7XHJcbiAgICB0aGlzLl9pbmRleCA9IGluZGV4O1xyXG4gIH1cclxuXHJcbiAgcHJveHlQcm9wZXJ0aWVzKEluZGV4LCAnX2luZGV4JywgW1xyXG4gICAgJ25hbWUnLFxyXG4gICAgJ2tleVBhdGgnLFxyXG4gICAgJ211bHRpRW50cnknLFxyXG4gICAgJ3VuaXF1ZSdcclxuICBdKTtcclxuXHJcbiAgcHJveHlSZXF1ZXN0TWV0aG9kcyhJbmRleCwgJ19pbmRleCcsIElEQkluZGV4LCBbXHJcbiAgICAnZ2V0JyxcclxuICAgICdnZXRLZXknLFxyXG4gICAgJ2dldEFsbCcsXHJcbiAgICAnZ2V0QWxsS2V5cycsXHJcbiAgICAnY291bnQnXHJcbiAgXSk7XHJcblxyXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xyXG4gICAgJ29wZW5DdXJzb3InLFxyXG4gICAgJ29wZW5LZXlDdXJzb3InXHJcbiAgXSk7XHJcblxyXG4gIGZ1bmN0aW9uIEN1cnNvcihjdXJzb3IsIHJlcXVlc3QpIHtcclxuICAgIHRoaXMuX2N1cnNvciA9IGN1cnNvcjtcclxuICAgIHRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0O1xyXG4gIH1cclxuXHJcbiAgcHJveHlQcm9wZXJ0aWVzKEN1cnNvciwgJ19jdXJzb3InLCBbXHJcbiAgICAnZGlyZWN0aW9uJyxcclxuICAgICdrZXknLFxyXG4gICAgJ3ByaW1hcnlLZXknLFxyXG4gICAgJ3ZhbHVlJ1xyXG4gIF0pO1xyXG5cclxuICBwcm94eVJlcXVlc3RNZXRob2RzKEN1cnNvciwgJ19jdXJzb3InLCBJREJDdXJzb3IsIFtcclxuICAgICd1cGRhdGUnLFxyXG4gICAgJ2RlbGV0ZSdcclxuICBdKTtcclxuXHJcbiAgLy8gcHJveHkgJ25leHQnIG1ldGhvZHNcclxuICBbJ2FkdmFuY2UnLCAnY29udGludWUnLCAnY29udGludWVQcmltYXJ5S2V5J10uZm9yRWFjaChmdW5jdGlvbihtZXRob2ROYW1lKSB7XHJcbiAgICBpZiAoIShtZXRob2ROYW1lIGluIElEQkN1cnNvci5wcm90b3R5cGUpKSByZXR1cm47XHJcbiAgICBDdXJzb3IucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBjdXJzb3IgPSB0aGlzO1xyXG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY3Vyc29yLl9jdXJzb3JbbWV0aG9kTmFtZV0uYXBwbHkoY3Vyc29yLl9jdXJzb3IsIGFyZ3MpO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KGN1cnNvci5fcmVxdWVzdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBDdXJzb3IodmFsdWUsIGN1cnNvci5fcmVxdWVzdCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gT2JqZWN0U3RvcmUoc3RvcmUpIHtcclxuICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XHJcbiAgfVxyXG5cclxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuY3JlYXRlSW5kZXggPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBuZXcgSW5kZXgodGhpcy5fc3RvcmUuY3JlYXRlSW5kZXguYXBwbHkodGhpcy5fc3RvcmUsIGFyZ3VtZW50cykpO1xyXG4gIH07XHJcblxyXG4gIE9iamVjdFN0b3JlLnByb3RvdHlwZS5pbmRleCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG5ldyBJbmRleCh0aGlzLl9zdG9yZS5pbmRleC5hcHBseSh0aGlzLl9zdG9yZSwgYXJndW1lbnRzKSk7XHJcbiAgfTtcclxuXHJcbiAgcHJveHlQcm9wZXJ0aWVzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgW1xyXG4gICAgJ25hbWUnLFxyXG4gICAgJ2tleVBhdGgnLFxyXG4gICAgJ2luZGV4TmFtZXMnLFxyXG4gICAgJ2F1dG9JbmNyZW1lbnQnXHJcbiAgXSk7XHJcblxyXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xyXG4gICAgJ3B1dCcsXHJcbiAgICAnYWRkJyxcclxuICAgICdkZWxldGUnLFxyXG4gICAgJ2NsZWFyJyxcclxuICAgICdnZXQnLFxyXG4gICAgJ2dldEFsbCcsXHJcbiAgICAnZ2V0S2V5JyxcclxuICAgICdnZXRBbGxLZXlzJyxcclxuICAgICdjb3VudCdcclxuICBdKTtcclxuXHJcbiAgcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbXHJcbiAgICAnb3BlbkN1cnNvcicsXHJcbiAgICAnb3BlbktleUN1cnNvcidcclxuICBdKTtcclxuXHJcbiAgcHJveHlNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFtcclxuICAgICdkZWxldGVJbmRleCdcclxuICBdKTtcclxuXHJcbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb24oaWRiVHJhbnNhY3Rpb24pIHtcclxuICAgIHRoaXMuX3R4ID0gaWRiVHJhbnNhY3Rpb247XHJcbiAgICB0aGlzLmNvbXBsZXRlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgIH07XHJcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZWplY3QoaWRiVHJhbnNhY3Rpb24uZXJyb3IpO1xyXG4gICAgICB9O1xyXG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmVqZWN0KGlkYlRyYW5zYWN0aW9uLmVycm9yKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLm9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gbmV3IE9iamVjdFN0b3JlKHRoaXMuX3R4Lm9iamVjdFN0b3JlLmFwcGx5KHRoaXMuX3R4LCBhcmd1bWVudHMpKTtcclxuICB9O1xyXG5cclxuICBwcm94eVByb3BlcnRpZXMoVHJhbnNhY3Rpb24sICdfdHgnLCBbXHJcbiAgICAnb2JqZWN0U3RvcmVOYW1lcycsXHJcbiAgICAnbW9kZSdcclxuICBdKTtcclxuXHJcbiAgcHJveHlNZXRob2RzKFRyYW5zYWN0aW9uLCAnX3R4JywgSURCVHJhbnNhY3Rpb24sIFtcclxuICAgICdhYm9ydCdcclxuICBdKTtcclxuXHJcbiAgZnVuY3Rpb24gVXBncmFkZURCKGRiLCBvbGRWZXJzaW9uLCB0cmFuc2FjdGlvbikge1xyXG4gICAgdGhpcy5fZGIgPSBkYjtcclxuICAgIHRoaXMub2xkVmVyc2lvbiA9IG9sZFZlcnNpb247XHJcbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKTtcclxuICB9XHJcblxyXG4gIFVwZ3JhZGVEQi5wcm90b3R5cGUuY3JlYXRlT2JqZWN0U3RvcmUgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fZGIuY3JlYXRlT2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cykpO1xyXG4gIH07XHJcblxyXG4gIHByb3h5UHJvcGVydGllcyhVcGdyYWRlREIsICdfZGInLCBbXHJcbiAgICAnbmFtZScsXHJcbiAgICAndmVyc2lvbicsXHJcbiAgICAnb2JqZWN0U3RvcmVOYW1lcydcclxuICBdKTtcclxuXHJcbiAgcHJveHlNZXRob2RzKFVwZ3JhZGVEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXHJcbiAgICAnZGVsZXRlT2JqZWN0U3RvcmUnLFxyXG4gICAgJ2Nsb3NlJ1xyXG4gIF0pO1xyXG5cclxuICBmdW5jdGlvbiBEQihkYikge1xyXG4gICAgdGhpcy5fZGIgPSBkYjtcclxuICB9XHJcblxyXG4gIERCLnByb3RvdHlwZS50cmFuc2FjdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbih0aGlzLl9kYi50cmFuc2FjdGlvbi5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XHJcbiAgfTtcclxuXHJcbiAgcHJveHlQcm9wZXJ0aWVzKERCLCAnX2RiJywgW1xyXG4gICAgJ25hbWUnLFxyXG4gICAgJ3ZlcnNpb24nLFxyXG4gICAgJ29iamVjdFN0b3JlTmFtZXMnXHJcbiAgXSk7XHJcblxyXG4gIHByb3h5TWV0aG9kcyhEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXHJcbiAgICAnY2xvc2UnXHJcbiAgXSk7XHJcblxyXG4gIC8vIEFkZCBjdXJzb3IgaXRlcmF0b3JzXHJcbiAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgb25jZSBicm93c2VycyBkbyB0aGUgcmlnaHQgdGhpbmcgd2l0aCBwcm9taXNlc1xyXG4gIFsnb3BlbkN1cnNvcicsICdvcGVuS2V5Q3Vyc29yJ10uZm9yRWFjaChmdW5jdGlvbihmdW5jTmFtZSkge1xyXG4gICAgW09iamVjdFN0b3JlLCBJbmRleF0uZm9yRWFjaChmdW5jdGlvbihDb25zdHJ1Y3Rvcikge1xyXG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGVbZnVuY05hbWUucmVwbGFjZSgnb3BlbicsICdpdGVyYXRlJyldID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XHJcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIHZhciBuYXRpdmVPYmplY3QgPSB0aGlzLl9zdG9yZSB8fCB0aGlzLl9pbmRleDtcclxuICAgICAgICB2YXIgcmVxdWVzdCA9IG5hdGl2ZU9iamVjdFtmdW5jTmFtZV0uYXBwbHkobmF0aXZlT2JqZWN0LCBhcmdzLnNsaWNlKDAsIC0xKSk7XHJcbiAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QucmVzdWx0KTtcclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIHBvbHlmaWxsIGdldEFsbFxyXG4gIFtJbmRleCwgT2JqZWN0U3RvcmVdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcclxuICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0QWxsKSByZXR1cm47XHJcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24ocXVlcnksIGNvdW50KSB7XHJcbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgIHZhciBpdGVtcyA9IFtdO1xyXG5cclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcclxuICAgICAgICBpbnN0YW5jZS5pdGVyYXRlQ3Vyc29yKHF1ZXJ5LCBmdW5jdGlvbihjdXJzb3IpIHtcclxuICAgICAgICAgIGlmICghY3Vyc29yKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpdGVtcy5wdXNoKGN1cnNvci52YWx1ZSk7XHJcblxyXG4gICAgICAgICAgaWYgKGNvdW50ICE9PSB1bmRlZmluZWQgJiYgaXRlbXMubGVuZ3RoID09IGNvdW50KSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gIH0pO1xyXG5cclxuICB2YXIgZXhwID0ge1xyXG4gICAgb3BlbjogZnVuY3Rpb24obmFtZSwgdmVyc2lvbiwgdXBncmFkZUNhbGxiYWNrKSB7XHJcbiAgICAgIHZhciBwID0gcHJvbWlzaWZ5UmVxdWVzdENhbGwoaW5kZXhlZERCLCAnb3BlbicsIFtuYW1lLCB2ZXJzaW9uXSk7XHJcbiAgICAgIHZhciByZXF1ZXN0ID0gcC5yZXF1ZXN0O1xyXG5cclxuICAgICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIGlmICh1cGdyYWRlQ2FsbGJhY2spIHtcclxuICAgICAgICAgIHVwZ3JhZGVDYWxsYmFjayhuZXcgVXBncmFkZURCKHJlcXVlc3QucmVzdWx0LCBldmVudC5vbGRWZXJzaW9uLCByZXF1ZXN0LnRyYW5zYWN0aW9uKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIHAudGhlbihmdW5jdGlvbihkYikge1xyXG4gICAgICAgIHJldHVybiBuZXcgREIoZGIpO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBkZWxldGU6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ2RlbGV0ZURhdGFiYXNlJywgW25hbWVdKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZXhwO1xyXG4gICAgbW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IG1vZHVsZS5leHBvcnRzO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzZWxmLmlkYiA9IGV4cDtcclxuICB9XHJcbn0oKSk7IiwiLypqc2hpbnQgZXN2ZXJzaW9uOiA2ICovXHJcblxyXG4vKipcclxuICogQ29tbW9uIGRhdGFiYXNlIGhlbHBlciBmdW5jdGlvbnMuXHJcbiAqL1xyXG5jbGFzcyBEQkhlbHBlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5kYlByb21pc2UgPSBpZGIub3BlbigncmVzdGF1cmFudC1yZXZpZXdzJywgMSwgdXBncmFkZURiID0+IHtcclxuICAgICAgdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycsIHtcclxuICAgICAgICBrZXlQYXRoOiAnaWQnXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEYXRhYmFzZSBVUkwuXHJcbiAgICogQ2hhbmdlIHRoaXMgdG8gcmVzdGF1cmFudHMuanNvbiBmaWxlIGxvY2F0aW9uIG9uIHlvdXIgc2VydmVyLlxyXG4gICAqL1xyXG4gIGdldCBEQVRBQkFTRV9VUkwoKSB7XHJcbiAgICBjb25zdCBwb3J0ID0gMTMzNzsgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBzZXJ2ZXIgcG9ydFxyXG4gICAgcmV0dXJuIGAvL2xvY2FsaG9zdDoke3BvcnR9L3Jlc3RhdXJhbnRzYDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGFsbCByZXN0YXVyYW50cyBmcm9tIERCIGlmIHBvc3NpYmxlLlxyXG4gICAqL1xyXG4gIGZldGNoUmVzdGF1cmFudHMoY2FsbGJhY2spIHtcclxuXHJcbiAgICAvLyBGaXJzdCBnZXQgcmVzdGF1cmFudHMgZnJvbSB0aGUgZGF0YWJhc2UgYW5kIHRoZW4gZnJvbSB0aGUgd2ViXHJcbiAgICB0aGlzLmRiUHJvbWlzZS50aGVuKGRiID0+IHtcclxuXHJcbiAgICAgIHJldHVybiBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudHMnKS5vYmplY3RTdG9yZSgncmVzdGF1cmFudHMnKS5nZXRBbGwoKTtcclxuXHJcbiAgICB9KS50aGVuKHJlc3RhdXJhbnRzID0+IHtcclxuXHJcbiAgICAgIC8vIERpc3BsYXkgcmVzdGF1cmFudHMgZnJvbSB0aGUgZGF0YWJhc2VcclxuICAgICAgY2FsbGJhY2soW3RydWUsIHJlc3RhdXJhbnRzXSk7XHJcblxyXG4gICAgICAvLyBHZXQgcmVzdGF1cmFudHMgZnJvbSB0aGUgd2ViXHJcbiAgICAgIGZldGNoKHRoaXMuREFUQUJBU0VfVVJMKVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgIGNhbGxiYWNrKFt0cnVlLCBkYXRhXSk7XHJcblxyXG4gICAgICAgICAgLy8gQWRkIHJlc3RhdXJhbnRzIGZyb20gdGhlIHdlYiB0byB0aGUgZGF0YWJhc2VcclxuICAgICAgICAgIHRoaXMuZGJQcm9taXNlLnRoZW4oZGIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXN0YXVyYW50cycsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmVzdGF1cmFudHMnKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdGF1cmFudCBvZiBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgc3RvcmUucHV0KHJlc3RhdXJhbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHguY29tcGxldGU7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiBjYWxsYmFjayhbZmFsc2UsIGVycm9yXSkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCBhbGwgcmVzdGF1cmFudCBieSBJRCBmcm9tIERCIGlmIHBvc3NpYmxlLlxyXG4gICAqL1xyXG4gIGZldGNoUmVzdGF1cmFudChjYWxsYmFjaywgaWQpIHtcclxuXHJcbiAgICAvLyBGaXJzdCBnZXQgcmVzdGF1cmFudHMgZnJvbSB0aGUgZGF0YWJhc2UgYW5kIHRoZW4gZnJvbSB0aGUgd2ViXHJcbiAgICB0aGlzLmRiUHJvbWlzZS50aGVuKGRiID0+IHtcclxuICAgICAgcmV0dXJuIGRiLnRyYW5zYWN0aW9uKCdyZXN0YXVyYW50cycpLm9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycpLmdldChwYXJzZUludChpZCkpO1xyXG4gICAgfSkudGhlbihyZXN0YXVyYW50ID0+IHtcclxuICAgICAgLy8gRGlzcGxheSByZXN0YXVyYW50cyBmcm9tIHRoZSBkYXRhYmFzZVxyXG4gICAgICBjYWxsYmFjayhbdHJ1ZSwgcmVzdGF1cmFudF0pO1xyXG5cclxuICAgICAgLy8gR2V0IHJlc3RhdXJhbnRzIGZyb20gdGhlIHdlYlxyXG4gICAgICBmZXRjaCh0aGlzLkRBVEFCQVNFX1VSTCArIGAvJHtpZH1gKVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgIGNhbGxiYWNrKFt0cnVlLCBkYXRhXSk7XHJcblxyXG4gICAgICAgICAgLy8gQWRkIHJlc3RhdXJhbnRzIGZyb20gdGhlIHdlYiB0byB0aGUgZGF0YWJhc2VcclxuICAgICAgICAgIHRoaXMuZGJQcm9taXNlLnRoZW4oZGIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXN0YXVyYW50cycsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICAgICAgdHgub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJykucHV0KGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY2FsbGJhY2soW2ZhbHNlLCBlcnJvcl0pKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYSByZXN0YXVyYW50IGJ5IGl0cyBJRC5cclxuICAgKi9cclxuICBmZXRjaFJlc3RhdXJhbnRCeUlkKGlkLCBjYWxsYmFjaykge1xyXG4gICAgLy8gZmV0Y2ggYWxsIHJlc3RhdXJhbnRzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAgdGhpcy5mZXRjaFJlc3RhdXJhbnQoKFtvayA9IGZhbHNlLCByZXNwb25zZV0gPSBbXSkgPT4ge1xyXG4gICAgICBpZiAoIW9rKSB7XHJcbiAgICAgICAgY2FsbGJhY2soIW9rLCByZXNwb25zZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2FsbGJhY2sob2ssIHJlc3BvbnNlKTtcclxuICAgICAgICAvL2NhbGxiYWNrKG51bGwsICdSZXN0YXVyYW50IGRvZXMgbm90IGV4aXN0Jyk7XHJcbiAgICAgIH1cclxuICAgIH0sIGlkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIHJlc3RhdXJhbnRzIGJ5IGEgY3Vpc2luZSB0eXBlIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZShjdWlzaW5lLCBjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzICB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xyXG4gICAgdGhpcy5mZXRjaFJlc3RhdXJhbnRzKChbb2sgPSBmYWxzZSwgcmVzcG9uc2VdID0gW10pID0+IHtcclxuICAgICAgaWYgKCFvaykge1xyXG4gICAgICAgIGNhbGxiYWNrKCFvaywgcmVzcG9uc2UpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gY3Vpc2luZSB0eXBlXHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHJlc3BvbnNlLmZpbHRlcihyID0+IHIuY3Vpc2luZV90eXBlID09IGN1aXNpbmUpO1xyXG4gICAgICAgIGNhbGxiYWNrKG9rLCByZXN1bHRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIG5laWdoYm9yaG9vZCB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBmZXRjaFJlc3RhdXJhbnRCeU5laWdoYm9yaG9vZChuZWlnaGJvcmhvb2QsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIHRoaXMuZmV0Y2hSZXN0YXVyYW50cygoW29rID0gZmFsc2UsIHJlc3BvbnNlXSA9IFtdKSA9PiB7XHJcbiAgICAgIGlmICghb2spIHtcclxuICAgICAgICBjYWxsYmFjayghb2ssIHJlc3BvbnNlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGaWx0ZXIgcmVzdGF1cmFudHMgdG8gaGF2ZSBvbmx5IGdpdmVuIG5laWdoYm9yaG9vZFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXNwb25zZS5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xyXG4gICAgICAgIGNhbGxiYWNrKG9rLCByZXN1bHRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgYW5kIGEgbmVpZ2hib3Job29kIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZUFuZE5laWdoYm9yaG9vZChjdWlzaW5lLCBuZWlnaGJvcmhvb2QsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIHRoaXMuZmV0Y2hSZXN0YXVyYW50cygoW29rID0gZmFsc2UsIHJlc3BvbnNlXSA9IFtdKSA9PiB7XHJcbiAgICAgIGlmICghb2spIHtcclxuICAgICAgICBjYWxsYmFjayghb2ssIHJlc3BvbnNlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgcmVzdWx0cyA9IHJlc3BvbnNlO1xyXG4gICAgICAgIGlmIChjdWlzaW5lICE9ICdhbGwnKSB7IC8vIGZpbHRlciBieSBjdWlzaW5lXHJcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIociA9PiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5laWdoYm9yaG9vZCAhPSAnYWxsJykgeyAvLyBmaWx0ZXIgYnkgbmVpZ2hib3Job29kXHJcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsYmFjayhvaywgcmVzdWx0cyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYWxsIG5laWdoYm9yaG9vZHMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICovXHJcbiAgZmV0Y2hOZWlnaGJvcmhvb2RzKGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIHRoaXMuZmV0Y2hSZXN0YXVyYW50cygoW29rID0gZmFsc2UsIHJlc3BvbnNlXSA9IFtdKSA9PiB7XHJcbiAgICAgIGlmICghb2spIHtcclxuICAgICAgICBjYWxsYmFjayghb2ssIHJlc3BvbnNlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBHZXQgYWxsIG5laWdoYm9yaG9vZHMgZnJvbSBhbGwgcmVzdGF1cmFudHNcclxuICAgICAgICBjb25zdCBuZWlnaGJvcmhvb2RzID0gcmVzcG9uc2UubWFwKCh2LCBpKSA9PiByZXNwb25zZVtpXS5uZWlnaGJvcmhvb2QpO1xyXG4gICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gbmVpZ2hib3Job29kc1xyXG4gICAgICAgIGNvbnN0IHVuaXF1ZU5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzLmZpbHRlcigodiwgaSkgPT4gbmVpZ2hib3Job29kcy5pbmRleE9mKHYpID09IGkpO1xyXG4gICAgICAgIGNhbGxiYWNrKG9rLCB1bmlxdWVOZWlnaGJvcmhvb2RzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCBhbGwgY3Vpc2luZXMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICovXHJcbiAgZmV0Y2hDdWlzaW5lcyhjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICB0aGlzLmZldGNoUmVzdGF1cmFudHMoKFtvayA9IGZhbHNlLCByZXNwb25zZV0gPSBbXSkgPT4ge1xyXG4gICAgICBpZiAoIW9rKSB7XHJcbiAgICAgICAgY2FsbGJhY2soIW9rLCByZXNwb25zZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gR2V0IGFsbCBjdWlzaW5lcyBmcm9tIGFsbCByZXN0YXVyYW50c1xyXG4gICAgICAgIGNvbnN0IGN1aXNpbmVzID0gcmVzcG9uc2UubWFwKCh2LCBpKSA9PiByZXNwb25zZVtpXS5jdWlzaW5lX3R5cGUpO1xyXG4gICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gY3Vpc2luZXNcclxuICAgICAgICBjb25zdCB1bmlxdWVDdWlzaW5lcyA9IGN1aXNpbmVzLmZpbHRlcigodiwgaSkgPT4gY3Vpc2luZXMuaW5kZXhPZih2KSA9PSBpKTtcclxuICAgICAgICBjYWxsYmFjayhvaywgdW5pcXVlQ3Vpc2luZXMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3RhdXJhbnQgcGFnZSBVUkwuXHJcbiAgICovXHJcbiAgdXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KSB7XHJcbiAgICByZXR1cm4gKGAuL3Jlc3RhdXJhbnQuaHRtbD9pZD0ke3Jlc3RhdXJhbnQuaWR9YCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXN0YXVyYW50IGltYWdlIFVSTC5cclxuICAgKi9cclxuICBpbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xyXG4gICAgcmV0dXJuIChgL2ltZy8ke3Jlc3RhdXJhbnQucGhvdG9ncmFwaH0uanBmYCk7XHJcbiAgfVxyXG5cclxuICBpbWFnZU5hbWVGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpIHtcclxuICAgIHJldHVybiAocmVzdGF1cmFudC5waG90b2dyYXBoIHx8ICc1LmpwZicpLnJlcGxhY2UoL1xcLmpwZiQvLCAnJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYXAgbWFya2VyIGZvciBhIHJlc3RhdXJhbnQuXHJcbiAgICovXHJcbiAgbWFwTWFya2VyRm9yUmVzdGF1cmFudChyZXN0YXVyYW50LCBtYXApIHtcclxuICAgIGNvbnN0IG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xyXG4gICAgICBwb3NpdGlvbjogcmVzdGF1cmFudC5sYXRsbmcsXHJcbiAgICAgIHRpdGxlOiByZXN0YXVyYW50Lm5hbWUsXHJcbiAgICAgIHVybDogdGhpcy51cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpLFxyXG4gICAgICBtYXA6IG1hcCxcclxuICAgICAgYW5pbWF0aW9uOiBnb29nbGUubWFwcy5BbmltYXRpb24uRFJPUFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbWFya2VyO1xyXG4gIH1cclxuXHJcbn1cclxuIiwiY2xhc3MgU2VydmljZVdvcmtlckNvbnRyb2xsZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX3JlZ2lzdGVyU2VydmljZVdvcmtlcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogIFJlZ2lzdGVyIHRoZSBTZXJ2aWNlIFdvcmtlclxyXG4gICAqL1xyXG4gIF9yZWdpc3RlclNlcnZpY2VXb3JrZXIoKSB7XHJcbiAgICBpZiAoIW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyKSByZXR1cm47XHJcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcignc3cuanMnKTtcclxuICB9XHJcbn1cclxuXHJcbm5ldyBTZXJ2aWNlV29ya2VyQ29udHJvbGxlcigpO1xyXG4iXX0=
